{"ast":null,"code":"var _jsxFileName = \"/Users/Enroute/Desktop/220407_Assigment5/spacex-render-JerryAnderium/src/Sites/Dragons/component.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Dragons } from '../../components/Dragons/component';\nimport { getDragons } from '../../services/spacex';\nimport { LoadMsg } from '../../components/Loading/component';\nimport { ErrMsg } from '../../components/Error/component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DragonsSite = () => {\n  _s();\n\n  const [dragons, setDragons] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    async function get() {\n      try {\n        setIsLoading(true);\n        const dataD = await getDragons();\n        setDragons(dataD);\n        setIsLoading(false);\n      } catch (e) {\n        console.error(e);\n        setIsError(true);\n      }\n    }\n\n    get();\n  }, []);\n  const mappedDragons = dragons.map(dragon => /*#__PURE__*/_jsxDEV(Dragons, {\n    dragon: dragon\n  }, dragon.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }, this));\n\n  if (isError && !isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ErrMsg, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n  return !isError && isLoading ? /*#__PURE__*/_jsxDEV(LoadMsg, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: mappedDragons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DragonsSite, \"RRgAMlZJ5/U0d/MFFvVy3SXl7sw=\");\n\n_c = DragonsSite;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragonsSite\");","map":{"version":3,"sources":["/Users/Enroute/Desktop/220407_Assigment5/spacex-render-JerryAnderium/src/Sites/Dragons/component.tsx"],"names":["React","useEffect","useState","Dragons","getDragons","LoadMsg","ErrMsg","DragonsSite","dragons","setDragons","isLoading","setIsLoading","isError","setIsError","get","dataD","e","console","error","mappedDragons","map","dragon","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,oCAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,oCAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAM,EAAN,CAAtC;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,GAAf,GAAqB;AACnB,UAAI;AACFH,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAMI,KAAK,GAAG,MAAMX,UAAU,EAA9B;AACAK,QAAAA,UAAU,CAACM,KAAD,CAAV;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OALD,CAKE,OAAOK,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAH,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF;;AACDC,IAAAA,GAAG;AACJ,GAbQ,EAaN,EAbM,CAAT;AAeA,QAAMK,aAAa,GAAGX,OAAO,CAACY,GAAR,CAAaC,MAAD,iBAC9B,QAAC,OAAD;AAAyB,IAAA,MAAM,EAAEA;AAAjC,KAAcA,MAAM,CAACC,EAArB;AAAA;AAAA;AAAA;AAAA,UADkB,CAAtB;;AAIA,MAAIV,OAAO,IAAI,CAACF,SAAhB,EAA2B;AACzB,wBACE;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,SAAO,CAACE,OAAD,IAAYF,SAAZ,gBACL,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADK,gBAGL;AAAA,cACKS;AADL;AAAA;AAAA;AAAA;AAAA,UAHF;AAOD,CAvCM;;GAAMZ,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Dragons } from '../../components/Dragons/component'\nimport { getDragons } from '../../services/spacex'\nimport { LoadMsg } from '../../components/Loading/component'\nimport { ErrMsg } from '../../components/Error/component'\n\n\nexport const DragonsSite = () => {\n  const [dragons, setDragons] = useState<any>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isError, setIsError] = useState(false)\n\n  useEffect(() => {\n    async function get() {\n      try {\n        setIsLoading(true)\n        const dataD = await getDragons()\n        setDragons(dataD)\n        setIsLoading(false)\n      } catch (e) {\n        console.error(e)\n        setIsError(true)\n      }\n    }\n    get()\n  }, [])\n\n  const mappedDragons = dragons.map((dragon: any) => (\n      <Dragons key={dragon.id} dragon={dragon} />\n  ))\n\n  if (isError && !isLoading) {\n    return (\n      <div>\n        <ErrMsg/>\n      </div>\n    )\n  }\n\n  return !isError && isLoading ? (\n    <LoadMsg/>\n  ) : (\n    <div>\n        {mappedDragons}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}